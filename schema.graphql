#################################################
# Interfaces
#################################################

interface IEvent {
  id: ID! # transactionHash-logId
  timestamp: BigInt!
}

interface IContract {
  id: ID! # Contract address
  createdAt: BigInt!
}

#################################################
# Current-state entities
#################################################

type User @entity {
  id: ID! # deafult opolis wallet address
  defaultWallet: Wallet!
  preferredWallet: Wallet!
  wallets: [Wallet!] @derivedFrom(field: "user")
  isEmployee: Boolean!
  isWhitelisted: Boolean!
  totalStakedBalance: BigDecimal!
  totalRewardClaimed: BigDecimal!
  createdAt: BigInt!
}

type Wallet @entity {
  id: ID! # wallet address
  user: User!
  createdAt: BigInt!
}

type Token @entity {
  id: ID! # token address
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigInt!
}

type Payroll @entity {
  id: ID! # payrollId
  payrollId: BigInt!
  payor: Bytes! # address of the payor
  token: Token!
  amount: BigDecimal!
  createdAt: BigInt!
  txHash: Bytes!
  withdrawnAt: BigInt
  contract: OpolisPayContract!
}

type Stake @entity {
  id: ID! # memberId (stakeId)
  memberId: BigInt!
  staker: Bytes! # address of the payor
  token: Token!
  amount: BigDecimal!
  stakeNumber: BigInt!
  createdAt: BigInt!
  txHash: Bytes!
  withdrawnAt: BigInt
  contract: OpolisPayContract!
}

type OpolisPayToken @entity {
  id: ID! # opolisPayId-tokenId
  token: Token!
  liqDestination: Bytes
  opolisPayContract: OpolisPayContract!
  createdAt: BigInt!
}

type OpolisPayContract implements IContract @entity {
  id: ID! # Contract address
  opolisAdmin: Bytes!
  opolisHelper: Bytes!
  destination: Bytes!
  supportedTokens: [OpolisPayToken!]! @derivedFrom(field: "opolisPayContract")
  liqDestinations: [Bytes!]
  createdAt: BigInt!
  version: Int!
}

type StakingContract implements IContract @entity {
  id: ID!
  owner: Bytes!
  isPaused: Boolean!
  stakeToken: Token!
  minStake: BigDecimal!
  totalStake: BigDecimal!
  description: String!
  createdAt: BigInt!
}

type WhitelistContract implements IContract @entity {
  id: ID!
  owner: Bytes!
  totalUsers: BigInt!
  totalWhitelistedUsers: BigInt!
  totalWhitelistedEmployees: BigInt!
  totalEmployeeUsers: BigInt!
  totalCoalitionUsers: BigInt!
  createdAt: BigInt!
}

type MerkleRedeemContract implements IContract @entity {
  id: ID!
  owner: Bytes!
  rewardToken: Token!
  totalRewardCycles: BigInt!
  totalTokenAllocation: BigDecimal!
  createdAt: BigInt!
}

#################################################
# Historical event entities
#################################################

#### Whitelist Contract Events ####

type AddedToWhitelistEvent implements IEvent @entity {
  id: ID!
  user: User!
  isEmployee: Boolean!
  timestamp: BigInt!
}

type UpdatedWhitelistAddressEvent implements IEvent @entity {
  id: ID!
  user: User!
  oldWallet: Wallet!
  updatedWallet: Wallet!
  timestamp: BigInt!
}

type RemovedFromWhitelistEvent implements IEvent @entity {
  id: ID!
  user: User!
  timestamp: BigInt!
}

#### Staking Contract Events ####

type StakeEvent implements IEvent @entity {
  id: ID!
  user: User!
  wallet: Wallet!
  amount: BigDecimal!
  totalStaked: BigDecimal!
  timestamp: BigInt!
}

type UnstakeEvent implements IEvent @entity {
  id: ID!
  user: User!
  wallet: Wallet!
  amount: BigDecimal!
  totalStaked: BigDecimal!
  timestamp: BigInt!
}

#### MerkleRedeem Contract Events ####

type RootAddedEvent implements IEvent @entity {
  id: ID!
  rewardEpoch: BigInt!
  totalAllocation: BigDecimal!
  depositor: Bytes!
  timestamp: BigInt!
}

type ClaimedEvent implements IEvent @entity {
  id: ID!
  rewardEpoch: BigInt!
  wallet: Wallet!
  claimedBalance: BigDecimal!
  timestamp: BigInt!
}

#### OpolisPay Contract Events ####

type SetupCompleteEvent implements IEvent @entity {
  id: ID!
  destination: Bytes! # address of the destination Wire account
  admin: Bytes! # address of the admin account
  helper: Bytes! # address of the helper account
  supportedTokens: [Bytes!]!
  timestamp: BigInt!
}

type StakedEvent implements IEvent @entity {
  id: ID!
  staker: Bytes! # address of the staker
  token: Token!
  amount: BigDecimal!
  memberId: BigInt!
  stakeNumber: BigInt!
  timestamp: BigInt!
}

type PaidEvent implements IEvent @entity {
  id: ID!
  payrollId: BigInt!
  payor: Bytes!
  token: Token!
  amount: BigDecimal!
  timestamp: BigInt!
}

type OpsPayrollWithdrawEvent implements IEvent @entity {
  id: ID!
  payrollId: BigInt!
  token: Token!
  amount: BigDecimal!
  timestamp: BigInt!
}

type OpsStakeWithdrawEvent implements IEvent @entity {
  id: ID!
  stakeId: BigInt!
  token: Token!
  amount: BigDecimal!
  stakeNumber: BigInt!
  timestamp: BigInt!
}

type SweepEvent implements IEvent @entity {
  id: ID!
  sweeper: Bytes!
  token: Token!
  amount: BigDecimal!
  timestamp: BigInt!
}

type NewDestinationEvent implements IEvent @entity {
  id: ID!
  oldDestination: Bytes!
  destination: Bytes!
  timestamp: BigInt!
}

type NewAdminEvent implements IEvent @entity {
  id: ID!
  oldAdmin: Bytes!
  opolisAdmin: Bytes!
  timestamp: BigInt!
}

type NewHelperEvent implements IEvent @entity {
  id: ID!
  oldHelper: Bytes!
  newHelper: Bytes!
  timestamp: BigInt!
}

type NewTokensEvent implements IEvent @entity {
  id: ID!
  newTokens: [Bytes!]!
  newDestinations: [Bytes!]
  timestamp: BigInt!
}

### OpolisPay ContractV3 Events

type SetupCompleteEventV3 implements IEvent @entity {
  id: ID!
  admin: Bytes! # address of the admin account
  helper: Bytes! # address of the helper account
  ethLiquidation: Bytes! # address of the destination for eth
  supportedTokens: [Bytes!]!
  liqDestinations: [Bytes!]!
  timestamp: BigInt!
}

type NewDestinationEventV3 implements IEvent @entity {
  id: ID!
  token: Token!
  oldDestination: Bytes!
  destination: Bytes!
  timestamp: BigInt!
}